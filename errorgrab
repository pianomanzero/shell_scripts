#!/bin/bash
#
#-errorgrab
#-A script to grab stuff from logsets
#
#- 1- place this file in your ~/bin directory on elvis.igs.corp
#-    -if  you do not have a bin directory, create one. 
#-    -this directory is already in your user's path on elvis
#- 3- make the script executable (chmod +x errorgrab)
#- 4- enter errograb in the root of the logset to be analyzed
#
#
#- in development:
#- SMB rollup patch status, hardware scan, 
#
#

#startup function
function startup (){

echo -e "$(tput bold)**************************************"
echo -e "**        errorgrab v. 2.0.1.2      **"
echo -e "**************************************$(tput sgr0)"
echo ""
echo "Checking current directory..."

username="$(whoami)"

echo -e "$(tput bold)Hello $username$(tput sgr0)"

loc="$(pwd)"
rootdir="$loc"
messageDir="$loc/messages"
hwdir="$loc/isi_hw_status"


echo "Our current location is $rootdir . Is this the root of the logset? (y/n)"
read atroot

if [ "$atroot" = "y" ]
then
  clear
  loadnodes
  MAINF
else
  echo "Please re-run this script from the root of the logset"
  exit 0
fi
} #end startup


#message search
function message_search(){
  echo "Looking for messages logs..."

  changedir $messageDir

  echo "What are you searching for? (case insensitive)"
  read searchby

  echo "How far back would you like to search? (date format YYYY-MM-DD, format can be a fragmnet like YYYY-MM or YYYY)"
  read timeframe

  echo "Would you like to output the results to a file? (y/n)"
  read writefile

  if [ $writefile = "y" ]
  then
    myfilename="messages_$(date +%m%d%Y)_$searchby"
    echo "Results will be written to $myfilename"
  fi

  FILECOUNT="$(ls $loc | grep -v ^l | wc -l)"


  FILELIST=("$(ls $loc | sort -V)")

  echo "Looking for files in $(pwd)"
  echo  ""
  echo "There are $FILECOUNT files in $(pwd)" 

  echo "The search param is $searchby"

  if [ $writefile = "y" ]
  then

    for x in $FILELIST
      do
      echo "----------------------------------------------------" >> $myfilename
      echo "$x  Search parameter: $searchby" >> $myfilename
      echo "----------------------------------------------------" >> $myfilename
      result="$(grep -i $searchby $x | grep -i $timeframe | sort | uniq -f3)"
      echo "$result" >> $myfilename
      echo "" >> $myfilename
    done
  else

    for x in $FILELIST
      do
      echo "----------------------------------------------------"
      echo "$x  Search parameter: $searchby"
      echo "----------------------------------------------------"
      result="$(grep -i $searchby $x | grep -i $timeframe | sort | uniq -f2)"
      echo "$result"
      echo ""
    done 
  fi



  changedir $rootdir
  #exit 0
  MAINF
} #end message file search

function messagetails(){

  changedir $messageDir

  echo "How many lines from the end of the file would you like to grab?"
  read lines

  echo "Would you like to output the results to a file? (y/n)"
  read writefile

  if [ $writefile = "y" ]
  then
    myfilename="messageTails_$(date +%m%d%Y)_$lines"
    echo "Results will be written to $myfilename"
  fi

  FILECOUNT="$(ls $loc | grep -v ^l | wc -l)"


  FILELIST=("$(ls $loc | sort -V)")

  echo "Looking for files in $(pwd)"
  echo  ""
  echo "There are $FILECOUNT files in $(pwd)" 

  if [ $writefile = "y" ]
  then

    for x in $FILELIST
      do
      echo "----------------------------------------------------" >> $myfilename
      echo "Message Tail $x" >> $myfilename
      echo "----------------------------------------------------" >> $myfilename
      result="$(tail -n $lines $x)"
      echo "$result" >> $myfilename
      echo "" >> $myfilename
    done
    echo "Output has been written to $myfilename"
  else

    for x in $FILELIST
      do
      echo "----------------------------------------------------"
      echo "Message Tail $x" >> $myfilename
      echo "----------------------------------------------------"
      result="$(tail -n $lines $x)"
      echo "$result"
      echo ""
    done 
  fi



  changedir $rootdir
MAINF
} #end messagetails

function changedir() {

  cd $1
  loc="$(pwd)"
}

#hw scan
function hwscan(){
  myfilename="general_hardware_scan_$(date +%m%d%Y)"
  echo "Output will be written to $myfilename"
  echo ""
  echo ""
  echo "----------------------------------------------------" >> $myfilename
  echo "General Hardware Status" >> $myfilename
  echo "----------------------------------------------------" >> $myfilename
 
  for dir in ${nodeArray[@]}
  do
    echo $dir >> $myfilename
    cat $dir/isi_hw_status >> $myfilename
    echo ""
  done
  echo ""
  echo ""
  MAINF
}
#end hw scan

#rollup patch check
function rollup(){
  echo ""
  echo ""
  echo "This functionality isn't ready yet, but will query for SMB rollup patch status"
  echo "check for updates soon"
  echo ""
  MAINF

}
#end rollup patch check

#general health check
# :: TODO :: add option to prepend SR number to file

function healthy(){
  echo "Running simple health check....."
  echo ""
  myfile="simple_health_check_$(date +%m%d%Y)"
  echo "Output will be written to $myfile"
  echo "Checking cluster status..."
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo ":    OneFS Version: $VERSION      :" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile

  #check isi_status
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo ":           isi status            :" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  cat ${nodeArray[1]}/isi_status >> $myfile
  echo "" >> $myfile
  echo "Checking boot drives..."

  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo ":           boot drives           :" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo "" >> $myfile

  for dir in ${nodeArray[@]}
  do
    echo $dir >> $myfile
    grep -i 'ad4\|ad7' $dir/atacontrol >> $myfile
    echo "" >> $myfile
  done
  
  for dir in ${nodeArray[@]}
  do
    echo $dir >> $myfile
    grep -i complete $dir/gmirror_status | wc -l >> $myfile
    echo "" >> $myfile
  done

  echo "Check for degraded boot drives" >> $myfile
  
  for dir in ${nodeArray[@]}
  do
    echo $dir >> $myfile
    grep -i degraded $dir/gmirror_status
    echo ""
  done

  echo "" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo ":   Check root partition space    :" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo "" >> $myfile
 
  for dir in ${nodeArray[@]}
  do
    echo $dir >> $myfile
    grep -i root $dir/df >> $myfile
    echo ""
  done

  echo "" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo ":      Check hardware status      :" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo "" >> $myfile
 
  for dir in ${nodeArray[@]}
  do
    echo $dir >> $myfile
    cat $dir/isi_hw_status | grep -A 5 -i 'Battery1:' >> $myfile 
    echo ""
    cat $dir/isi_hw_status | grep -A 2 - 'PwrSupl' >> $myfile
    echo ""
  done
  
  echo "" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo ":         Firmware Status         :" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo "" >> $myfile
  cat $loc/firmware >> $myfile
  echo ""


  
  
  echo "" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo ":   Group statement consistency   :" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo "" >> $myfile
  
  for dir in ${nodeArray[@]}
  do
    echo $dir >> $myfile
    cat $dir/efs.gmp.group >> $myfile
    echo ""
  done

  echo "" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo ":             Uptime              :" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo "" >> $myfile
   
  for dir in ${nodeArray[@]}
  do
    echo $dir >> $myfile
    cat $dir/uptime >> $myfile
    echo ""
  done


  echo "" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo ":       Installed Packages        :" >> $myfile
  echo ":::::::::::::::::::::::::::::::::::" >> $myfile
  echo "" >> $myfile
   
  for dir in ${nodeArray[@]}
  do
    echo ""
    echo $dir >> $myfile
    echo ""
    cat $dir/varlog.tar/log/isi_pkg | grep -i installed >> $myfile
    echo ""
  done


  #go back to main
  MAINF
}
#end health check

#high iops by node
function highops(){
  
  for dir in ${nodeArray[@]}
  do
    echo ""
    echo $dir
    echo ""
    grep SATA $dir/isi_statistics_drive | cut -d \: -f2- | awk '{print "The Highest IOPs out is on Drive: "$1" Which has: "$5" IOPs, "$4"B of throughput in, "$6"B of throughput out, and "$3" IOPs in."}' | sort -k11n | tail -1
    echo ""
    echo ""
  done
  
  MAINF
}
#end highops


#help screen
function helpscreen(){


  clear
  echo ""
  echo -e "$(tput bold)**********************************************************************$(tput sgr0)"
  echo -e "$(tput bold)Help Screen$(tput sgr0)"
  echo -e "$(tput bold)**********************************************************************$(tput sgr0)"
  echo ""
  echo -e "$(tput bold)Search message files$(tput sgr0)"
  echo "Performs a search of each node's message log.  In this version search is limited to one word."
  echo "Search results can be output to screen or to file, which will be placed in the <log_set>/messages directory."
  echo ""      
  echo -e "$(tput bold)Message file tails$(tput sgr0)"
  echo "Grabs a specified number of lines from the end of each node's messages log"
  echo "Search results can be output to screen or to file, which will be placed in the <log_set>/messages directory."
  echo ""
  echo -e "$(tput bold)List nodes$(tput sgr0)"
  echo "List out nodes in this cluster"
  echo "Future revisions will contain additional simple information on each node."
  echo ""              
  echo -e "$(tput bold)Hardware scan$(tput sgr0)"
  echo "Outputs each node's isi_hw_status file and compiles them into one file in the logset root"
  echo ""                
  echo -e "$(tput bold)SMB rollup patch status$(tput sgr0)"
  echo "Incomplete. Will report whether the cluster has the most current SMB rollup patch installed."
  echo ""                  
  echo -e "$(tput bold)General cluster health$(tput sgr0)"
  echo "Preforms a quick and dirty health check. Includes information from  isi status, boot drives,"
  echo "root partition space, simple hardware status, firmware status, group statements, uptime, installed packages."
  echo ""                      
  echo -e "$(tput bold)High IOPs by node$(tput sgr0)"
  echo "Lists out the SATA disk with the highest IOPs per node ordered by highest."
  echo ""                        
  echo -e "$(tput bold)Help screen$(tput sgr0)"
  echo "Helps you understand stuff better"
  echo ""
  echo -e "$(tput bold)Quit to shell$(tput sgr0)"
  echo "Buh bye!"
  echo ""
}
#end helpscreen

#list nodes
function listnodes(){
  echo "OneFS $VERSION"
  for i in ${nodeArray[@]}
  do
    echo $i
  done
  MAINF
}
#end list nodes

#load nodes
function loadnodes(){
  nodes="$(cut -d' ' -f3 nodes_info | grep -v node)"
  nodeArray=($nodes)
  VERSION="$(cut -d' ' -f4 ${nodeArray[0]}/uname)"
}
#end load nodes

#main function
function MAINF(){
echo ""
echo -e "$(tput bold)What would you like to do?$(tput sgr0)"
echo "1 - Search messages files"
echo "2 - Message file tails"
echo "3 - List nodes"
echo "4 - Hardware scan"
echo "5 - SMB rollup patch status"
echo "6 - General cluster health"
echo "7 - High IOPs by node"
echo "h - Help screen"
echo "q - Quit to shell"
echo ""
read option

case "$option" in
  1)
    echo ""
    message_search
    ;;
  2)
    echo ""
    messagetails
    ;;
  3)
    echo ""
    listnodes
    ;;
  4)
    echo ""
    hwscan
    ;;
  5)
    echo ""
    rollup
    ;;
  6)
    echo ""
    healthy
    ;;
  7)
    echo ""
    highops
    ;;
  h)
    echo ""
    helpscreen
    ;;
  H)
    echo ""
    helpscreen
    ;;
  q)
    echo -e "$(tput bold)Bye $username!$(tput sgr0)"
    sleep 1 
    clear
    exit 0
    ;;
  Q)
    echo -e "$(tput bold)Bye $username!$(tput sgr0)"
    sleep 1
    clear
    exit 0
    ;;
  *)
    echo ""
    echo "please pick a valid option"
    echo ""
    MAINF
    ;;
esac


}
#end main

startup
